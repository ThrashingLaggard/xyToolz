name: CI/CD for xyToolz

# Trigger: Run this workflow on push to the "master" branch
on:
  push:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # GitHub-hosted Ubuntu Linux runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # Clone the GitHub repository

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4  # Install the .NET 8 SDK
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore xyToolz/xyToolz.csproj  # Restore NuGet packages

    - name: Format code
      run: dotnet format  # Automatically format code according to .editorconfig

    - name: Generate new version from commits
      id: versioning
      run: |
        # Get current version from the .csproj
        current_version=$(grep -oPm1 "(?<=<PackageVersion>)[^<]+" xyToolz/xyToolz.csproj)
        echo "Current version: $current_version"

        # Get last commit message
        commits=$(git log -1 --pretty=%B)
        echo "Last commit message: $commits"

        # Split current version into major.minor.patch
        major=$(echo $current_version | cut -d. -f1)
        minor=$(echo $current_version | cut -d. -f2)
        patch=$(echo $current_version | cut -d. -f3)

        # Determine version bump based on commit message content
        if echo "$commits" | grep -iq "BREAKING CHANGE"; then
          major=$((major + 1))
          minor=0
          patch=0
        elif echo "$commits" | grep -iq "^feat"; then
          minor=$((minor + 1))
          patch=0
        elif echo "$commits" | grep -iq "^fix"; then
          patch=$((patch + 1))
        else
          echo "No semantic version keyword found. Keeping current version."
        fi

        # Create new version string
        new_version="$major.$minor.$patch"
        echo "New version: $new_version"

        # Export version for other steps
        echo "version=$new_version" >> $GITHUB_ENV

    - name: Update .csproj with new version
      run: |
        # Replace <PackageVersion> tag in .csproj file with the new version
        sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>${{ env.version }}<\/PackageVersion>/" xyToolz/xyToolz.csproj

    - name: Build xyToolz
      run: dotnet build xyToolz/xyToolz.csproj --configuration Release --no-restore  # Build the project

    - name: Test xyToolz
      run: dotnet test xyToolz/xyToolz.csproj --no-build --verbosity normal  # Run unit tests

    - name: Pack NuGet package
      run: dotnet pack xyToolz/xyToolz.csproj --configuration Release --no-build -o out  # Create .nupkg file

    - name: Check package version exists
      id: check_version
      run: |
        # Check if the version is already published on NuGet
        version=$(grep -oPm1 "(?<=<PackageVersion>)[^<]+" xyToolz/xyToolz.csproj)
        echo "Detected version: $version"
        exists=$(curl -sL https://api.nuget.org/v3-flatcontainer/xytoolz/$version/xytoolz.$version.nupkg)

        if [ -n "$exists" ]; then
          echo "Package version $version already exists. Skipping publish."
          echo "skip_publish=true" >> "$GITHUB_OUTPUT"
        else
          echo "skip_publish=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Push to NuGet
      if: steps.check_version.outputs.skip_publish == 'false'  # Only push if version doesn't already exist
      run: dotnet nuget push out/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.XYTOOLZ_API_KEY }} --skip-duplicate

    - name: Create GitHub Release
      if: steps.check_version.outputs.skip_publish == 'false'  # Only create release for new versions
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.version }}  # Use version as GitHub release tag
        name: Release ${{ env.version }}
        draft: false
        prerelease: false
