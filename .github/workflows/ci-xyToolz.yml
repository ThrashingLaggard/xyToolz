name: CI/CD for xyToolz

# Trigger: Push to the "master" branch to run this workflow 
on:
  push:
    branches:
      - master


permissions:
  contents: write

# -----------------------------------
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
#------------------------------------

jobs:
  build-and-changed:
    runs-on: ubuntu-latest  # GitHub-hosted Ubuntu Linux runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # Clone the GitHub repository

   # -------------------- GUARD (new) --------------------
    - name: Guard – skip bot or duplicate commit message
      id: guard
      shell: bash
      run: |
        # 1) Bot-Commits (z.B. Version-Bump der CI) überspringen
        if [ "${{ github.actor }}" = "github-actions[bot]" ]; then
          echo "SKIP=true" >> "$GITHUB_ENV"
          echo "reason=bot" >> "$GITHUB_OUTPUT"
          echo "Guard: bot commit -> skip"
          exit 0
        fi

        # 2) Doppelte Commit-Message (aktueller == vorheriger Commit)
        #    Holt die letzten 2 Messages sicher (nach Checkout).
        git fetch --depth=2 origin ${{ github.ref }}
        m1="$(git log -1 --pretty=%B)"
        m2="$(git log -2 --pretty=%B | sed -n '2p')"

        if [ "$m1" = "$m2" ]; then
          echo "SKIP=true" >> "$GITHUB_ENV"
          echo "reason=duplicate-message" >> "$GITHUB_OUTPUT"
          echo "Guard: duplicate commit message -> skip"
          exit 0
        fi

        # Sonst: weiter
        echo "SKIP=false" >> "$GITHUB_ENV"
    # -----------------------------------------------------

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4  # Install the .NET 8 SDK
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore xyToolz/xyToolz.csproj  # Restore NuGet packages

    - name: Generate new version from commits
      id: versioning
      run: |
        # Get current version from the .csproj
        current_version=$(grep -oPm1 "(?<=<PackageVersion>)[^<]+" xyToolz/xyToolz.csproj)
        echo "Current version: $current_version"

        # Get last commit message
        commits=$(git log -1 --pretty=%B)
        echo "Last commit message: $commits"

        # Split current version into major. minor. patch
        major=$(echo $current_version | cut -d. -f1)
        minor=$(echo $current_version | cut -d. -f2)
        patch=$(echo $current_version | cut -d. -f3)

      
        # Determine version bump based on commit message content
        changed="false"
        if echo "$commits" | grep -iq "BREAKING CHANGE"; then
          major=$((major + 1))
          minor=0
          patch=0
          changed="true"
        elif echo "$commits" | grep -iqE "^(feat|fix):"; then
          if echo "$commits" | grep -iq "^feat:"; then
            minor=$((minor + 1))
            patch=0
            changed="true"
          elif echo "$commits" | grep -iq "^fix:"; then
            patch=$((patch + 1))
            changed="true"
          fi
        fi

        # Try again...because fuck you too.
        if [ "$changed" == "false" ]; then
          commitsSingleLine=$(echo "$commits" | tr '\n' ' ')

          if echo "$commitsSingleLine" | grep -iq "BREAKING CHANGE"; then
            major=$((major + 1)); minor=0; patch=0
            changed="true"
          elif echo "$commitsSingleLine" | grep -iq "feat:"; then
            minor=$((minor + 1)); patch=0
            changed="true"
          elif echo "$commitsSingleLine" | grep -iq "fix:"; then
            patch=$((patch + 1))
            changed="true"
          fi
        fi
        
        # Debug message
        if [ "$changed" == "false" ]; then
            echo "No semantic version keyword found. Keeping current version."
        else
          echo "Semantic version keyword found. Updating current version."
        fi


        # Create new version string
        new_version="$major.$minor.$patch"
        echo "New version: $new_version"

        # Export version for other steps
        echo "version=$new_version" >> $GITHUB_ENV

    - name: Update .csproj with new version
      run: |
        # Replace <PackageVersion> tag in .csproj file with the new version
        sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>${{ env.version }}<\/PackageVersion>/" xyToolz/xyToolz.csproj

    - name: Commit updated version
      run: | 
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git pull origin master  
        git add xyToolz/xyToolz.csproj
        if git diff --cached --quiet; then
          echo "Nothing to commit – skipping."
        else
          git commit -m "chore: bump version to ${{ env.version }}"
          git push origin master
          echo "Changes committed and pushed."
        fi
      continue-on-error: true

    - name: Build xyToolz
      run: dotnet build xyToolz/xyToolz.csproj --configuration Release --no-restore  # Build the project

    - name: Test xyToolz
      run: dotnet test xyToolz/xyToolz.csproj --no-build --verbosity normal  # Run unit tests

    - name: Pack NuGet package
      run: dotnet pack xyToolz/xyToolz.csproj --configuration Release --no-build -o out  # Create .nupkg file

    - name: Check package version exists
      id: check_version
      run: |
        version=$(grep -oPm1 "(?<=<PackageVersion>)[^<]+" xyToolz/xyToolz.csproj)
        echo "Detected version: $version"

        content_type=$(curl -sI -o /dev/null -w "%{content_type}" https://api.nuget.org/v3-flatcontainer/xytoolz/$version/xytoolz.$version.nupkg)

        if [[ "$content_type" == "application/octet-stream" ]]; then
          echo "Package version $version already exists. Skipping publish."
          echo "skip_publish=true" >> "$GITHUB_OUTPUT"
        else
          echo "Package version $version not found. Proceeding to publish."
          echo "skip_publish=false" >> "$GITHUB_OUTPUT"
        fi


    - name: Push to NuGet
      if: steps.check_version.outputs.skip_publish == 'false'  # Only push if version doesn't already exist              
      run: dotnet nuget push out/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.XYTOOLZ_API_KEY }} --skip-duplicate




    - name: Create GitHub Release
      if: steps.check_version.outputs.skip_publish == 'false'  # Only create release for new versions
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.version }}  # Use version as GitHub release tag
        name: Release ${{ env.version }}
        draft: false
        prerelease: false
